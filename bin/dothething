#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'logger'

path = File.expand_path(File.dirname(__FILE__))
options = {}

#All available options for the adminware command
opt_parser = OptionParser.new do |opt|
 opt.on('-n', '--name NAME', 'The name of the directory') do |v|
  options[:name] = v
 end
 
 opt.on('-h', '--host NAME', 'The name of the host to run the script on') do |v|
  options[:host] = v
 end

 opt.on('-f', '--forward', 'Call the forward script for NAME') do
  options[:command] = 'forward'
 end

 opt.on('-r', '--rewind', 'Call the rewind script for NAME') do 
  options[:command] = 'rewind'
 end
end

#Displays help command on invalid entry
begin opt_parser.parse! ARGV
rescue OptionParser::InvalidOption => e
 puts e
 puts opt_parser
 exit 1
end.parse!

#If no command was entered display help and exit 
if options.empty?
 puts opt_parser
 exit 1
end

module EventLogger
 class Log
  def initialize 
    @logger = Logger.new $logdir
    @logger.level = Logger::DEBUG
    @logger.formatter = proc do |severity, datetime, progname, msg|
     date_format = datetime.strftime("%d-%m-%Y %H:%M:%S")
     "[#{date_format}]  #{severity.ljust(5)}: #{msg}\n"
    end
  end

  def log
   @logger
  end
 end
end

class State
 include EventLogger
 attr_accessor :file

 #Loads the config file
 def initialize
  @event = Log.new
 end

 #Toggles value in state hash
 def toggle(name)
  @sf = YAML.load_file(@file)
  #Finds all true/false values in hash
  t = @sf[name].key(true)
  f = @sf[name].key(false) 
  
  #Toggles the values
  @sf[name][:"#{t}"] = false
  @sf[name][:"#{f}"] = true  
 end
 
 #Saves the current state to file
 def save!
  File.open(@file, 'w') { |f| YAML.dump(@sf, f) }
 end

 #Checks the current state of the requested script for the given job
 def status(name, command)
  @sf = YAML.load_file(@file)
  #The script will run if it's state is currently false
  if @sf[name][:"#{command}"] == false
  else
   @event.log.error "Can't execute #{command} for #{name} as it is already set to true"
   exit 1 
  end
 end
end

class Config
 def initialize(config)
  @configfile = config
  @config = YAML.load_file(@configfile) 
 end
 
 #Sets the directory for any given setting in the file 
 def dirset(path, name, setting)
  if exists?(setting)
   @dir = @config[setting]
   
   #If the setting exists it checks if it is absolute or relative
   if @dir.include? "../"
    @dir = File.join(path, @dir, name)
   else
    @dir = File.join(@dir, name)
   end
  else
   puts "The config file does not contain a path for the setting: #{setting}"
   if setting == 'jobdir' then exit 1 end
  end
 end
 
 #Check to see if a given setting exists in the file
 def exists?(setting)
  if @config[setting] != nil then return true end
 end
end

class Job
 include EventLogger
 attr_accessor :name
 attr_accessor :command
 attr_accessor :dir
 attr_accessor :script
 attr_accessor :host

 def initialize
  @event = Log.new
 end

 #Performs validation on entered command
 def validate!
  if @host.empty?
   @event.log.info "Attempting to run #{@command} script for #{@name}"
  else 
   @event.log.info "Attempting to run #{@command} script for #{@name} on #{@host}"
   host_exist?
  end
  
  if dir_exist? and file_exist? then
   return true
  else
   @event.log.error "Failed to validate"
   exit 1
  end
 end
 
 #Checks if the host exists to run the script on
 def host_exist?
  if system "ssh", @host, "echo", "$$", ">", "/tmp/test"
   @hostexists = true
   return true
  else
   exit 1 
  end
 end
 
 #Checks to see if the directory exists for input NAME
 def dir_exist?
  if Dir.exist?(@dir)
   return true
  else
   @event.log.error "#{@dir} does not exist"
   return false
  end
 end
 
 #Checks to see if the file exists for input COMMAND
 def file_exist?
  if File.exist?(@script)
   return true
  else
   @event.log.error "The #{@command} script for #{@name} does not exist"
   return false
  end
 end
 
 #Runs the requested script for the job
 def run
  if @hostexists == true 
   @event.log.info "Running #{@command} script for #{@name} on #{@host}"
   system "ssh", @host, "bash", @script
  else
   @event.log.info "Running #{@command} script for #{@name}"
   system "bash", @script 
  end
 end
end

#Initialisation for variables, objects etc
name = "#{options[:name]}"
command = "#{options[:command]}"
host = "#{options[:host]}"
configfile = File.join(path, 'config.yml')
config = Config.new(configfile)
$logdir = config.dirset(path, 'events.log', 'logdir')

#Redirects and appends STDERR messages to the log file
$stderr.reopen($logdir, "a")

#Initialise the job
job = Job.new
job.name = name
job.command = command
job.dir = config.dirset(path, name, 'jobdir')
job.script = File.join(job.dir, command + '.sh')
job.host = "#{options[:host]}" 

#Attempt to validate the job command
job.validate!

#Checks the curent state of the requested script
state = State.new
state.file = File.join(path, 'states.yml')
state.status(name, command)
state.toggle(name)
state.save!

#Runs the script for the job
job.run
